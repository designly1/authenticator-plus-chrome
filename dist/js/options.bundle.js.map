{"version":3,"file":"options.bundle.js","mappings":"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","sources":["webpack://authenticator-plus-chrome/./src/lib/crypto.js","webpack://authenticator-plus-chrome/./src/js/options.js"],"sourcesContent":["/*!\n * Title: AuthenticatorPlus\n * Author: Jay Simons\n * Website: https://1337707.xyz\n * Email: jay@designly.biz\n * (C) 2025\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport async function setPassword(password) {\n\tif (!password || typeof password !== 'string') {\n\t\tthrow new Error('Invalid password');\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.local.set({ encryptionPassword: password }, () => {\n\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\treject(new Error(chrome.runtime.lastError.message));\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport async function getPassword() {\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.local.get(['encryptionPassword'], result => {\n\t\t\tconst password = result.encryptionPassword;\n\t\t\tresolve(password || null);\n\t\t});\n\t});\n}\n\nexport async function passwordIsSet() {\n\tconst password = await getPassword();\n\treturn password !== null;\n}\n\nasync function getPasswordKey() {\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.local.get(['encryptionPassword'], async result => {\n\t\t\tconst password = result.encryptionPassword;\n\t\t\tif (!password) {\n\t\t\t\tconst message =\n\t\t\t\t\t'No password found in local storage. Please set your encryption password in options.';\n\t\t\t\treject(new Error(message));\n\t\t\t\talert(message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst keyMaterial = await crypto.subtle.importKey(\n\t\t\t\t'raw',\n\t\t\t\tnew TextEncoder().encode(password),\n\t\t\t\t{ name: 'PBKDF2' },\n\t\t\t\tfalse,\n\t\t\t\t['deriveKey'],\n\t\t\t);\n\t\t\tconst salt = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n\t\t\tconst key = await crypto.subtle.deriveKey(\n\t\t\t\t{\n\t\t\t\t\tname: 'PBKDF2',\n\t\t\t\t\tsalt,\n\t\t\t\t\titerations: 100000,\n\t\t\t\t\thash: 'SHA-256',\n\t\t\t\t},\n\t\t\t\tkeyMaterial,\n\t\t\t\t{ name: 'AES-GCM', length: 256 },\n\t\t\t\ttrue,\n\t\t\t\t['encrypt', 'decrypt'],\n\t\t\t);\n\t\t\tresolve(key);\n\t\t});\n\t});\n}\n\nasync function encryptData(data) {\n\tconst key = await getPasswordKey();\n\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t// Convert data to string if it's an object\n\tconst stringData = typeof data === 'object' ? JSON.stringify(data) : String(data);\n\tconst encodedData = new TextEncoder().encode(stringData);\n\tconst encrypted = await crypto.subtle.encrypt({ name: 'AES-GCM', iv }, key, encodedData);\n\treturn { encrypted, iv: Array.from(iv) };\n}\n\nasync function decryptData(encrypted, ivArray) {\n\tconst key = await getPasswordKey();\n\tconst iv = new Uint8Array(ivArray);\n\tconst decrypted = await crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, encrypted);\n\tconst decodedString = new TextDecoder().decode(decrypted);\n\t// Try to parse as JSON if possible\n\ttry {\n\t\treturn JSON.parse(decodedString);\n\t} catch (e) {\n\t\t// If parsing fails, return the string as-is\n\t\treturn decodedString;\n\t}\n}\n\n// Helper function to convert ArrayBuffer to Base64 string\nfunction arrayBufferToBase64(buffer) {\n\tconst binary = String.fromCharCode(...new Uint8Array(buffer));\n\treturn btoa(binary);\n}\n\n// Helper function to convert Base64 string back to ArrayBuffer\nfunction base64ToArrayBuffer(base64) {\n\tconst binary = atob(base64);\n\tconst bytes = new Uint8Array(binary.length);\n\tfor (let i = 0; i < binary.length; i++) {\n\t\tbytes[i] = binary.charCodeAt(i);\n\t}\n\treturn bytes.buffer;\n}\n\nexport async function secureStore(key, value) {\n\tif (!key || value === undefined) {\n\t\tthrow new Error('Invalid key or value');\n\t}\n\tconst { encrypted, iv } = await encryptData(value);\n\tif (!encrypted || !iv) {\n\t\tthrow new Error('Failed to encrypt data');\n\t}\n\n\t// Convert ArrayBuffer to Base64 string for storage\n\tconst encryptedBase64 = arrayBufferToBase64(encrypted);\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst data = { encrypted: encryptedBase64, iv };\n\t\tchrome.storage.sync.set({ [key]: data }, () => {\n\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\treject(new Error(chrome.runtime.lastError.message));\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport async function secureGet(key) {\n\tif (!key) {\n\t\tthrow new Error('Invalid key');\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.sync.get([key], async result => {\n\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\treject(new Error(chrome.runtime.lastError.message));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst data = result[key];\n\t\t\tif (!data) {\n\t\t\t\tresolve(null);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst { encrypted: encryptedBase64, iv } = data;\n\t\t\t\tif (!encryptedBase64 || !iv) {\n\t\t\t\t\tthrow new Error('Invalid data format');\n\t\t\t\t}\n\t\t\t\tconst encrypted = base64ToArrayBuffer(encryptedBase64);\n\t\t\t\tconst value = await decryptData(encrypted, iv);\n\t\t\t\tresolve(value);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport async function secureGetAll() {\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.sync.get(null, async result => {\n\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\treject(new Error(chrome.runtime.lastError.message));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst decryptedItems = {};\n\t\t\tfor (const [key, data] of Object.entries(result)) {\n\t\t\t\tif (data && data.encrypted && data.iv) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst encrypted = base64ToArrayBuffer(data.encrypted);\n\t\t\t\t\t\tconst value = await decryptData(encrypted, data.iv);\n\t\t\t\t\t\tdecryptedItems[key] = value;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error(`Failed to decrypt key \"${key}\":`, error.message);\n\t\t\t\t\t\tdecryptedItems[key] = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdecryptedItems[key] = data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve(decryptedItems);\n\t\t});\n\t});\n}\n\nexport async function secureDelete(key) {\n\tif (!key) {\n\t\tthrow new Error('Invalid key');\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tchrome.storage.sync.remove(key, () => {\n\t\t\tif (chrome.runtime.lastError) {\n\t\t\t\treject(new Error(chrome.runtime.lastError.message));\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n","/*!\n * Title: AuthenticatorPlus\n * Author: Jay Simons\n * Website: https://1337707.xyz\n * Email: jay@designly.biz\n * (C) 2025\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { secureGetAll, secureDelete, setPassword, passwordIsSet } from '@lib/crypto';\n\nconst accountsList = document.getElementById('accounts-list');\nconst clearAccountsBtn = document.getElementById('clear-accounts');\nconst clearAllDataBtn = document.getElementById('clear-all-data-btn');\nconst optionsCloseBtn = document.getElementById('options-close-btn');\nconst accountTemplate = document.getElementById('account-template');\nconst requestCameraBtn = document.getElementById('req-camera-btn');\nconst requestCameraContainer = document.getElementById('req-camera');\nconst reqCameraMessage = document.getElementById('req-camera-message');\nconst camAccessGranted = document.getElementById('cam-access-granted');\nconst passwordForm = document.getElementById('password-form');\nconst passwordInput = document.getElementById('password');\nconst passwordSubmit = document.getElementById('submit-password');\nconst passwordIsSetContainer = document.getElementById('password-is-set');\nconst changePasswordBtn = document.getElementById('change-password-btn');\n\nconst defaultReqCameraMessage = reqCameraMessage.textContent;\n\nasync function loadAccounts() {\n\ttry {\n\t\tconst decryptedData = await secureGetAll();\n\n\t\t// Clear and rebuild the accounts list\n\t\taccountsList.innerHTML = '';\n\n\t\tfor (const [key, account] of Object.entries(decryptedData)) {\n\t\t\tconst clone = accountTemplate.content.cloneNode(true);\n\t\t\tconst span = clone.querySelector('span');\n\t\t\tconst button = clone.querySelector('button.delete-account');\n\n\t\t\tspan.textContent = account.name;\n\t\t\tbutton.dataset.key = key;\n\t\t\tbutton.dataset.name = account.name;\n\n\t\t\taccountsList.appendChild(clone);\n\t\t}\n\n\t\tbindDeleteButtons();\n\t} catch (error) {\n\t\tconsole.error('Failed to load accounts:', error);\n\t\taccountsList.innerHTML =\n\t\t\t'<p class=\"error\">Failed to load accounts. Please check your encryption password.</p>';\n\t}\n}\n\nfunction bindDeleteButtons() {\n\tdocument.querySelectorAll('button.delete-account').forEach(btn => {\n\t\tbtn.addEventListener('click', confirmDeleteAccount);\n\t});\n}\n\nasync function confirmDeleteAccount(event) {\n\tconst button = event.target.closest('button.delete-account');\n\tif (!button) return;\n\n\tconst key = button.dataset.key;\n\tconst name = button.dataset.name;\n\n\tif (confirm(`Are you sure you want to delete ${name}?`)) {\n\t\ttry {\n\t\t\tawait secureDelete(key);\n\t\t\tawait loadAccounts();\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to delete account:', error);\n\t\t\talert('Failed to delete account. Please try again.');\n\t\t}\n\t}\n}\n\nasync function confirmDeleteAllAccounts() {\n\tif (confirm('Are you sure you want to delete all accounts? This action cannot be undone.')) {\n\t\tawait deleteAllAccounts();\n\t}\n}\n\nasync function deleteAllAccounts() {\n\ttry {\n\t\tawait chrome.storage.sync.clear();\n\t\tawait loadAccounts();\n\t} catch (error) {\n\t\tconsole.error('Failed to delete all data:', error);\n\t\talert('Failed to delete all data. Please try again.');\n\t}\n}\n\nconst confirmClearAllData = async () => {\n\tif (confirm('Are you sure you want to delete all data? This action cannot be undone.')) {\n\t\tawait chrome.storage.sync.clear();\n\t\tawait chrome.storage.local.clear();\n\t\twindow.location.reload();\n\t}\n};\n\nconst confirmChangePassword = async () => {\n\tconst message =\n\t\t'Are you sure you want to change your password? If you do, your current accounts will be unreadable.';\n\tif (confirm(message)) {\n\t\tpasswordForm.classList.remove('hidden');\n\t\tpasswordIsSetContainer.classList.add('hidden');\n\t}\n};\n\nclearAccountsBtn.addEventListener('click', confirmDeleteAllAccounts);\n\nclearAllDataBtn.addEventListener('click', confirmClearAllData);\n\noptionsCloseBtn.addEventListener('click', () => {\n\twindow.close();\n});\n\nchangePasswordBtn.addEventListener('click', confirmChangePassword);\n\nfunction resetCameraAccessMessage() {\n\treqCameraMessage.textContent = defaultReqCameraMessage;\n\treqCameraMessage.classList.remove('error');\n\trequestCameraContainer.classList.add('hidden');\n}\n\nfunction cameraAccessError(message) {\n\treqCameraMessage.textContent = message;\n\treqCameraMessage.classList.add('error');\n\trequestCameraContainer.classList.remove('hidden');\n\tcamAccessGranted.classList.add('hidden');\n}\n\nasync function checkCameraAccess() {\n\tresetCameraAccessMessage();\n\n\ttry {\n\t\t// Check if camera permission has been granted\n\t\tconst permissions = await navigator.permissions.query({ name: 'camera' });\n\n\t\tswitch (permissions.state) {\n\t\t\tcase 'prompt':\n\t\t\t\trequestCameraContainer.classList.remove('hidden');\n\t\t\t\tbreak;\n\t\t\tcase 'denied':\n\t\t\t\tconst message = 'Camera access is denied. Please allow access in your browser settings.';\n\t\t\t\tcameraAccessError(message);\n\t\t\t\tbreak;\n\t\t\tcase 'granted':\n\t\t\t\trequestCameraContainer.classList.add('hidden');\n\t\t\t\tcamAccessGranted.classList.remove('hidden');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcameraAccessError('Unknown camera access state.');\n\t\t\t\tbreak;\n\t\t}\n\t} catch (error) {\n\t\tconsole.warn('Permissions API not supported or error occurred:', error);\n\t}\n}\n\nrequestCameraBtn.addEventListener('click', async () => {\n\ttry {\n\t\tawait navigator.mediaDevices.getUserMedia({ video: true });\n\t\trequestCameraContainer.classList.add('hidden');\n\t\tcamAccessGranted.classList.remove('hidden');\n\t} catch (err) {\n\t\tconst message = 'Unable to access the camera. Please check your browser settings.';\n\t\treqCameraMessage.textContent = message;\n\t\treqCameraMessage.classList.add('error');\n\t}\n});\n\npasswordSubmit.addEventListener('click', async () => {\n\tconst password = passwordInput.value;\n\n\tif (!password) {\n\t\talert('Please enter a password.');\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait setPassword(password);\n\t\tawait loadAccounts();\n\t\tpasswordInput.value = '';\n\t\tpasswordIsSetContainer.classList.remove('hidden');\n\t\tpasswordForm.classList.add('hidden');\n\t} catch (error) {\n\t\tconsole.error('Failed to set password:', error);\n\t\talert('Failed to set password. Please try again.');\n\t}\n});\n\n// Initial load\nloadAccounts();\ncheckCameraAccess();\n\n// Check if password is already set\npasswordIsSet().then(isSet => {\n\tif (isSet) {\n\t\tpasswordIsSetContainer.classList.remove('hidden');\n\t\tpasswordForm.classList.add('hidden');\n\t} else {\n\t\tpasswordIsSetContainer.classList.add('hidden');\n\t\tpasswordForm.classList.remove('hidden');\n\t}\n});\n"],"names":["async","decryptData","encrypted","ivArray","key","Promise","resolve","reject","chrome","storage","local","get","password","result","encryptionPassword","message","Error","alert","keyMaterial","crypto","subtle","importKey","TextEncoder","encode","name","salt","Uint8Array","deriveKey","iterations","hash","length","getPasswordKey","iv","decrypted","decrypt","decodedString","TextDecoder","decode","JSON","parse","e","base64ToArrayBuffer","base64","binary","atob","bytes","i","charCodeAt","buffer","accountsList","document","getElementById","clearAccountsBtn","clearAllDataBtn","optionsCloseBtn","accountTemplate","requestCameraBtn","requestCameraContainer","reqCameraMessage","camAccessGranted","passwordForm","passwordInput","passwordSubmit","passwordIsSetContainer","changePasswordBtn","defaultReqCameraMessage","textContent","loadAccounts","decryptedData","sync","runtime","lastError","decryptedItems","data","Object","entries","value","error","console","secureGetAll","innerHTML","account","clone","content","cloneNode","span","querySelector","button","dataset","appendChild","querySelectorAll","forEach","btn","addEventListener","confirmDeleteAccount","event","target","closest","confirm","remove","secureDelete","cameraAccessError","classList","add","clear","deleteAllAccounts","window","location","reload","close","navigator","mediaDevices","getUserMedia","video","err","set","setPassword","permissions","query","state","warn","checkCameraAccess","getPassword","passwordIsSet","then","isSet"],"sourceRoot":""}