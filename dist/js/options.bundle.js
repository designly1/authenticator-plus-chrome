(()=>{"use strict";async function e(e,t){const n=await async function(){return new Promise(((e,t)=>{chrome.storage.local.get(["encryptionPassword"],(async n=>{const a=n.encryptionPassword;if(!a){const e="No password found in local storage. Please set your encryption password in options.";return t(new Error(e)),void alert(e)}const r=await crypto.subtle.importKey("raw",(new TextEncoder).encode(a),{name:"PBKDF2"},!1,["deriveKey"]),o=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),s=await crypto.subtle.deriveKey({name:"PBKDF2",salt:o,iterations:1e5,hash:"SHA-256"},r,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]);e(s)}))}))}(),a=new Uint8Array(t),r=await crypto.subtle.decrypt({name:"AES-GCM",iv:a},n,e),o=(new TextDecoder).decode(r);try{return JSON.parse(o)}catch(e){return o}}function t(e){const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return n.buffer}const n=document.getElementById("accounts-list"),a=document.getElementById("clear-accounts"),r=document.getElementById("clear-all-data-btn"),o=document.getElementById("options-close-btn"),s=document.getElementById("account-template"),c=document.getElementById("req-camera-btn"),d=document.getElementById("req-camera"),i=document.getElementById("req-camera-message"),l=document.getElementById("cam-access-granted"),u=document.getElementById("password-form"),m=document.getElementById("password"),y=document.getElementById("submit-password"),w=document.getElementById("password-is-set"),h=document.getElementById("change-password-btn"),g=i.textContent;async function p(){try{const a=await async function(){return new Promise(((n,a)=>{chrome.storage.sync.get(null,(async r=>{if(chrome.runtime.lastError)return void a(new Error(chrome.runtime.lastError.message));const o={};for(const[n,a]of Object.entries(r))if(a&&a.encrypted&&a.iv)try{const r=t(a.encrypted),s=await e(r,a.iv);o[n]=s}catch(e){console.error(`Failed to decrypt key "${n}":`,e.message),o[n]=null}else o[n]=a;n(o)}))}))}();n.innerHTML="";for(const[e,t]of Object.entries(a)){const a=s.content.cloneNode(!0),r=a.querySelector("span"),o=a.querySelector("button.delete-account");r.textContent=t.name,o.dataset.key=e,o.dataset.name=t.name,n.appendChild(a)}document.querySelectorAll("button.delete-account").forEach((e=>{e.addEventListener("click",f)}))}catch(e){console.error("Failed to load accounts:",e),n.innerHTML='<p class="error">Failed to load accounts. Please check your encryption password.</p>'}}async function f(e){const t=e.target.closest("button.delete-account");if(!t)return;const n=t.dataset.key,a=t.dataset.name;if(confirm(`Are you sure you want to delete ${a}?`))try{await async function(e){if(!e)throw new Error("Invalid key");return new Promise(((t,n)=>{chrome.storage.sync.remove(e,(()=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):t()}))}))}(n),await p()}catch(e){console.error("Failed to delete account:",e),alert("Failed to delete account. Please try again.")}}function E(e){i.textContent=e,i.classList.add("error"),d.classList.remove("hidden"),l.classList.add("hidden")}a.addEventListener("click",(async function(){confirm("Are you sure you want to delete all accounts? This action cannot be undone.")&&await async function(){try{await chrome.storage.sync.clear(),await p()}catch(e){console.error("Failed to delete all data:",e),alert("Failed to delete all data. Please try again.")}}()})),r.addEventListener("click",(async()=>{confirm("Are you sure you want to delete all data? This action cannot be undone.")&&(await chrome.storage.sync.clear(),await chrome.storage.local.clear(),window.location.reload())})),o.addEventListener("click",(()=>{window.close()})),h.addEventListener("click",(async()=>{confirm("Are you sure you want to change your password? If you do, your current accounts will be unreadable.")&&(u.classList.remove("hidden"),w.classList.add("hidden"))})),c.addEventListener("click",(async()=>{try{await navigator.mediaDevices.getUserMedia({video:!0}),d.classList.add("hidden"),l.classList.remove("hidden")}catch(e){const t="Unable to access the camera. Please check your browser settings.";i.textContent=t,i.classList.add("error")}})),y.addEventListener("click",(async()=>{const e=m.value;if(e)try{await async function(e){if(!e||"string"!=typeof e)throw new Error("Invalid password");return new Promise(((t,n)=>{chrome.storage.local.set({encryptionPassword:e},(()=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):t()}))}))}(e),await p(),m.value="",w.classList.remove("hidden"),u.classList.add("hidden")}catch(e){console.error("Failed to set password:",e),alert("Failed to set password. Please try again.")}else alert("Please enter a password.")})),p(),async function(){i.textContent=g,i.classList.remove("error"),d.classList.add("hidden");try{switch((await navigator.permissions.query({name:"camera"})).state){case"prompt":d.classList.remove("hidden");break;case"denied":E("Camera access is denied. Please allow access in your browser settings.");break;case"granted":d.classList.add("hidden"),l.classList.remove("hidden");break;default:E("Unknown camera access state.")}}catch(e){console.warn("Permissions API not supported or error occurred:",e)}}(),async function(){return null!==await async function(){return new Promise(((e,t)=>{chrome.storage.local.get(["encryptionPassword"],(t=>{const n=t.encryptionPassword;e(n||null)}))}))}()}().then((e=>{e?(w.classList.remove("hidden"),u.classList.add("hidden")):(w.classList.add("hidden"),u.classList.remove("hidden"))}))})();
//# sourceMappingURL=options.bundle.js.map