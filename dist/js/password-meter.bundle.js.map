{"version":3,"file":"password-meter.bundle.js","mappings":"mBAKA,IAiFIA,EAjFAC,EAAmB,EAGvB,SAASC,EAAeC,GACvB,MAAMC,EAAYC,SAASC,cAAc,sBACnCC,EAAaF,SAASC,cAAc,mBAEpCE,EAAQL,EAAOK,MACrBD,EAAWE,MAAQD,EAGnBJ,EAAUM,UAAUC,SAAQC,IACvBA,EAAUC,WAAW,WACxBT,EAAUM,UAAUI,OAAOF,EAC5B,IAEDR,EAAUM,UAAUK,IAAI,SAASP,KAIZH,SAASC,cAAc,kBAC/BU,YAFC,CAAC,OAAQ,OAAQ,OAAQ,SAAU,eAEhBR,GAGbH,SAASC,cAAc,sBAC/BW,MAAMC,MAAYV,EAAQ,EAAK,IAAjB,IAG1B,MAAMW,EAAOd,SAASC,cAAc,kBAChCE,GAAS,GACZW,EAAKC,UAAY,iJAIjBD,EAAKE,aAAa,SAAU,aAE5BF,EAAKC,UAAY,qLAKjBD,EAAKE,aAAa,SAAU,YAIPhB,SAASC,cAAc,oBAC/Bc,UAAY,oCAAoCjB,EAAOmB,oBAAoBC,oDAGzF,MAAMC,EAAuBnB,SAASC,cAAc,gBAC9CmB,EAActB,EAAOuB,SAASD,aAAe,GAC7CE,EAAUxB,EAAOuB,SAASC,QAEhC,GAAIA,GAAWF,EAAYG,OAAS,EAAG,CACtC,IAAIC,EAAO,oCACPF,IACHE,GAAQ,OAAOF,UAEhBF,EAAYd,SAAQmB,IACnBD,GAAQ,OAAOC,QAAiB,IAEjCD,GAAQ,QAERL,EAAqBJ,UAAYS,EACjCL,EAAqBd,UAAUK,IAAI,kBACpC,MACCS,EAAqBd,UAAUI,OAAO,kBAExC,CAGA,SAASiB,EAAwBC,GAChC,MAAM5B,EAAYC,SAASC,cAAc,sBACrC0B,EACH5B,EAAUM,UAAUK,IAAI,WAExBX,EAAUM,UAAUI,OAAO,UAE7B,CAIA,SAASmB,EAAuBC,GAC/BC,aAAanC,GAERkC,EAcLlC,EAAgBoC,YAAWC,UAC1B,MAAMC,IAAcrC,EACpB8B,GAAwB,GAExB,IACC,MAAMQ,QAAiBC,MC5Gf,oDD4GiC,CACxCC,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAU,CAAEX,eAIxB,GAAII,IAAcrC,EAAkB,OAEpC,IAAKsC,EAASO,GACb,MAAM,IAAIC,MAAM,qCAIjB7C,QADqBqC,EAASS,OAE/B,CAAE,MAAOC,GACRC,QAAQD,MAAM,oCAAqCA,GAEnD/C,EAAe,CACdM,MAAO,EACPc,oBAAqB,CACpB6B,qCAAsC,SAEvCzB,SAAU,CACTD,YAAa,CAAC,aACdE,QAAS,sCAGZ,CAAE,QACGW,IAAcrC,GACjB8B,GAAwB,EAE1B,IACE,KArDF7B,EAAe,CACdM,MAAO,EACPc,oBAAqB,CACpB6B,qCAAsC,aAEvCzB,SAAU,CACTD,YAAa,CAAC,oBACdE,QAAS,OA+Cb,CAGAtB,SAAS+C,iBAAiB,oBAAoB,KAE7C,MAAMC,EAAgBhD,SAASC,cAAc,aACzC+C,IACHA,EAAcD,iBAAiB,SAASE,IACvCrB,EAAuBqB,EAAEC,OAAO9C,MAAM,IAIvCwB,EAAuB,IACxB,G","sources":["webpack://authenticator-plus-chrome/./src/js/password-meter.js","webpack://authenticator-plus-chrome/./src/constants/password.js"],"sourcesContent":["import { passwordSettings } from '../constants/password';\n\nconst pwEndpoint = passwordSettings.endpoint;\n\n// Keep track of the latest request to handle race conditions\nlet currentRequestId = 0;\n\n// Strength meter update function\nfunction updateStrength(result) {\n\tconst container = document.querySelector('.password-feedback');\n\tconst scoreInput = document.querySelector('#password-score');\n\n\tconst score = result.score;\n\tscoreInput.value = score;\n\n\t// Update score class while preserving others\n\tcontainer.classList.forEach(className => {\n\t\tif (className.startsWith('score-')) {\n\t\t\tcontainer.classList.remove(className);\n\t\t}\n\t});\n\tcontainer.classList.add(`score-${score}`);\n\n\t// Update strength label\n\tconst words = ['Weak', 'Fair', 'Good', 'Strong', 'Very Strong'];\n\tconst strengthText = document.querySelector('#strength-text');\n\tstrengthText.textContent = words[score];\n\n\t// Update strength bar\n\tconst strengthBar = document.querySelector('.strength-bar-fill');\n\tstrengthBar.style.width = `${(score / 4) * 100}%`;\n\n\t// Update icon\n\tconst icon = document.querySelector('.strength-icon');\n\tif (score >= 3) {\n\t\ticon.innerHTML = `\n            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n            <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n        `;\n\t\ticon.setAttribute('stroke', '#16a34a');\n\t} else {\n\t\ticon.innerHTML = `\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n        `;\n\t\ticon.setAttribute('stroke', '#dc2626');\n\t}\n\n\t// Update crack time text\n\tconst crackTimeText = document.querySelector('.crack-time-text');\n\tcrackTimeText.innerHTML = `Your password would take <strong>${result.crack_times_display.online_throttling_100_per_hour}</strong> to crack.`;\n\n\t// Update suggestions\n\tconst suggestionsContainer = document.querySelector('.suggestions');\n\tconst suggestions = result.feedback.suggestions || [];\n\tconst warning = result.feedback.warning;\n\n\tif (warning || suggestions.length > 0) {\n\t\tlet html = '<strong>Suggestions:</strong><ul>';\n\t\tif (warning) {\n\t\t\thtml += `<li>${warning}</li>`;\n\t\t}\n\t\tsuggestions.forEach(suggestion => {\n\t\t\thtml += `<li>${suggestion}</li>`;\n\t\t});\n\t\thtml += '</ul>';\n\n\t\tsuggestionsContainer.innerHTML = html;\n\t\tsuggestionsContainer.classList.add('has-suggestions');\n\t} else {\n\t\tsuggestionsContainer.classList.remove('has-suggestions');\n\t}\n}\n\n// Loading state management\nfunction setPasswordMeterLoading(isLoading) {\n\tconst container = document.querySelector('.password-feedback');\n\tif (isLoading) {\n\t\tcontainer.classList.add('loading');\n\t} else {\n\t\tcontainer.classList.remove('loading');\n\t}\n}\n\n// Debounced password strength checker\nlet debounceTimer;\nfunction debouncedCheckPassword(password) {\n\tclearTimeout(debounceTimer);\n\n\tif (!password) {\n\t\tupdateStrength({\n\t\t\tscore: 0,\n\t\t\tcrack_times_display: {\n\t\t\t\toffline_fast_hashing_1e10_per_second: 'instantly',\n\t\t\t},\n\t\t\tfeedback: {\n\t\t\t\tsuggestions: ['Enter a password'],\n\t\t\t\twarning: null,\n\t\t\t},\n\t\t});\n\t\treturn;\n\t}\n\n\tdebounceTimer = setTimeout(async () => {\n\t\tconst requestId = ++currentRequestId;\n\t\tsetPasswordMeterLoading(true);\n\n\t\ttry {\n\t\t\tconst response = await fetch(pwEndpoint, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({ password }),\n\t\t\t});\n\n\t\t\t// If this isn't the latest request, ignore the result\n\t\t\tif (requestId !== currentRequestId) return;\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Failed to check password strength');\n\t\t\t}\n\n\t\t\tconst result = await response.json();\n\t\t\tupdateStrength(result);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error checking password strength:', error);\n\t\t\t// Show error state in the meter\n\t\t\tupdateStrength({\n\t\t\t\tscore: 0,\n\t\t\t\tcrack_times_display: {\n\t\t\t\t\toffline_fast_hashing_1e10_per_second: 'Error',\n\t\t\t\t},\n\t\t\t\tfeedback: {\n\t\t\t\t\tsuggestions: ['Try again'],\n\t\t\t\t\twarning: 'Failed to check password strength',\n\t\t\t\t},\n\t\t\t});\n\t\t} finally {\n\t\t\tif (requestId === currentRequestId) {\n\t\t\t\tsetPasswordMeterLoading(false);\n\t\t\t}\n\t\t}\n\t}, 500);\n}\n\n// Initialize everything when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n\t// Setup password input listener\n\tconst passwordInput = document.querySelector('#password');\n\tif (passwordInput) {\n\t\tpasswordInput.addEventListener('input', e => {\n\t\t\tdebouncedCheckPassword(e.target.value);\n\t\t});\n\n\t\t// Initialize with empty state\n\t\tdebouncedCheckPassword('');\n\t}\n});\n","export const passwordSettings = {\n\tendpoint: 'https://wsr-pw-strength-worker.wsrapp.workers.dev',\n\tminScore: 3,\n};\n"],"names":["debounceTimer","currentRequestId","updateStrength","result","container","document","querySelector","scoreInput","score","value","classList","forEach","className","startsWith","remove","add","textContent","style","width","icon","innerHTML","setAttribute","crack_times_display","online_throttling_100_per_hour","suggestionsContainer","suggestions","feedback","warning","length","html","suggestion","setPasswordMeterLoading","isLoading","debouncedCheckPassword","password","clearTimeout","setTimeout","async","requestId","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","offline_fast_hashing_1e10_per_second","addEventListener","passwordInput","e","target"],"sourceRoot":""}